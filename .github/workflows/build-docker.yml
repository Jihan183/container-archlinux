name: Build xfce-test container

on:
  push:
    branches:
      - devel
  schedule:
    - cron: '0 4 * * 0' # https://crontab.guru/#0_4_*_*_0
  release:
    types:
      - published

env:
  REGISTRY_USER: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ github.token }}
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  push_to_registry:
    # https://github.com/marketplace/actions/push-to-registry
    name: Build and Push container image to GitHub Packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: redhat-actions/podman-login@v1
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          registry: ${{ env.IMAGE_REGISTRY }}

      - name: Read and setup build args from environment
        id: build-args
        # https://gist.github.com/judy2k/7656bfe3b322d669ef75364a46327836
        run: |
          eval "cat <<EOF
          $(grep -Ev '^#' .env)
          EOF
          " | tee --append $GITHUB_ENV

          case "${{ github.event_name }}" in
            schedule) echo "::set-output name=tags::devel ${DOWNLOAD_DATE}" ;;
            release) echo "::set-output name=tags::latest ${GITHUB_REF##*/}" ;;
            push) echo '::set-output name=tags::devel' ;;
          esac

          echo "TIMESTAMP=$(date --date="${DOWNLOAD_DATE}" '+%s')" | tee --append $GITHUB_ENV

      - name: Build container
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: xfce-test-archlinux
          oci: false
          tags: ${{ steps.build-args.outputs.tags }}
          dockerfiles: |
            ./Dockerfile
          build-args: |
            ACTIONS_CI=${{ env.ACTIONS_CI }}
            TRAVIS_CI=${{ env.TRAVIS_CI }}
            USER_NAME=${{ env.USER_NAME }}
            USER_SHELL=${{ env.USER_SHELL }}
            CONTAINER_BASE=${{ env.CONTAINER_BASE }}
            MAIN_BRANCH=${{ env.MAIN_BRANCH }}
            DOWNLOAD_DATE=${{ env.DOWNLOAD_DATE }}
            PACMAN_HELPER=${{ env.PACMAN_HELPER }}
            PACMAN_HELPER_URL=${{ env.PACMAN_HELPER_URL }}
            CFLAGS=${{ env.CFLAGS }}
            CPPFLAGS=${{ env.CPPFLAGS }}
          extra-args: |
            --timestamp ${{ env.TIMESTAMP }}
            --os linux
            --arch amd64
        timeout-minutes: 50

      - name: Copy build logs
        id: extract-logs
        run: |
          mkdir --parents build
          podman create --name xfce-test "$BUILD_IMAGE:$(awk '{print $1}' <<< "$BUILD_TAGS")"

          buildah unshare -- bash --norc --noprofile -- <<'EOF'
          export mnt="$(buildah mount xfce-test)"
          xargs --max-args=1 bash -c '
            cat "${mnt}/$BUILD_LOGS/$1"*{prepare,build,package}.log | gzip > build/"$1"-log.gz
          ' - < container/pkglist.txt
          buildah unmount xfce-test
          EOF
        env:
          BUILD_LOGS: ${{ steps.build-image.outputs.build_logs }}
          BUILD_TAGS: ${{ steps.build-image.outputs.tags }}
          BUILD_IMAGE: ${{ steps.build-image.outputs.image }}

      - name: Push Image to Github Registry
        if: steps.build-image.outcome == 'success'
        id: push-to-gh
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}

      - name: Print image url
        run: echo "Image pushed to ${{ steps.push-to-gh.outputs.registry-paths }}"

      - name: Upload build logs
        if: steps.extract-logs.outcome == 'success'
        uses: actions/upload-artifact@v2
        with:
          name: build-log@${{ env.TAG }}
          path: ${{ github.workspace }}/build/*-log.gz
          retention-days: 7
